// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MoveAgent
#pragma kernel UpdateTexture

struct Agent
{
    float2 pos;
    float2 vel;
    float2 goal;
    int atGoal;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int numAgents;
int width;
int height;
float diffuse;
float decay;
float agentSpeed;
float accMult;
float agentRad;
float dt;
float time;
float seed;
float goalRad;
float4 baseColor;
Texture2D<float4> brushTexture;
RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> light;
Texture2D<float4> readTexture;

static const float PI = 3.141592653f;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float random(uint state)
{
    return hash(state) / 4294967295.0f;
}

bool inBounds(int2 pos)
{
    return pos.x >= 0 && pos.x < width && pos.y >= 0 && pos.y < height;
}

void UpdatePosition(inout Agent agent, inout uint agent_seed)
{

    float2 goal = agent.goal + float2((random(agent_seed++) - 0.5f) * 2 * goalRad, (random(agent_seed++) - 0.5f) * 2 * goalRad);
    float2 acc = accMult * (goal - agent.pos - agent.vel * 1.5f);
    acc /= float2(width, width);
    
    agent.vel += acc * dt;
    
    //if (length(agent.vel) > agentSpeed)
    //{
    //    agent.vel = agentSpeed * normalize(agent.vel);
    //}
    
    agent.pos += agent.vel * dt;
    
    agent.pos.x = max(min(agent.pos.x, width - 1), 0);
    agent.pos.y = max(min(agent.pos.y, height - 1), 0);
}

[numthreads(64, 1, 1)]
void MoveAgent(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) numAgents)
    {
        return;
    }
    
    Agent agent = agents[id.x];
    uint agent_seed = hash(id.x) + hash(id.x + time * 10000) + hash(seed);
    
    UpdatePosition(agent, agent_seed);
    
    if (!agent.atGoal && length(agent.pos - agent.goal) < goalRad)
    {
        agent.atGoal = 1;
    }
    
    float2 offset;
    // float theta = atan2(agent.vel.y, agent.vel.x);
    // float2x2 rotate = float2x2(cos(theta), sin(theta), -sin(theta), cos(theta));
    // for (int xOff = -agentRad; xOff <= agentRad; xOff++)
    // {
    //     for (int yOff = -agentRad; yOff <= agentRad; yOff++)
    //     {
    //         offset = float2(-xOff, yOff);
    //         if (inBounds(agent.pos + offset) && (xOff * xOff + yOff * yOff < agentRad * agentRad))
    //         {
    //             float4 writeCol = agent.atGoal ? readTexture[agent.pos + offset] : baseColor;
    //             float lerpAmt = agent.atGoal ? (length(writeCol) + 0.5f) / (2.f + length(offset)) : 0.1f / (1.f + length(offset));
    //             light[agent.pos + offset] = lerp(light[agent.pos + offset], writeCol, lerpAmt);
    //         }
    //     }
    // }
    
    int resX, resY;
    brushTexture.GetDimensions(resX, resY);
    int2 center = int2(resX / 2, resY / 2);
    for (int xOff = -resX / 2; xOff < resX / 2; xOff++)
    {
        for (int yOff = -resY / 2; yOff < resY / 2; yOff++)
        {
            offset = float2(xOff, yOff);
            float alpha = brushTexture[offset + center].a;
            if (inBounds(agent.pos + offset) && alpha > 0)
            {
                float4 writeCol = agent.atGoal ? readTexture[agent.pos + offset] : baseColor;
                float lerpAmt = agent.atGoal ? (length(writeCol) + 0.5f) / 2.5f : 0.1f;
                light[agent.pos + offset] = lerp(light[agent.pos + offset], writeCol, alpha * lerpAmt);
            }
        }
    }
    
    agents[id.x] = agent;
}

float4 BlurAt(uint2 pos)
{
    float4 sum = 0.f;
    uint num = 0;
    
    for (int xOff = -1; xOff <= 1; xOff++)
    {
        for (int yOff = -1; yOff <= 1; yOff++)
        {
            if (inBounds(pos + uint2(xOff, yOff)))
            {
                sum += light[pos + uint2(xOff, yOff)];
                num++;
            }
        }
    }
    
    float weight = saturate(diffuse * dt);
    return light[pos] * (1.f - weight) + sum / num * weight;

}

[numthreads(8, 8, 1)]
void UpdateTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height)
    {
        return;
    }
    
    float4 blur = BlurAt(id.xy);
    
    if (!any(light[id.xy]))
    {
        light[id.xy] = 0;
    }
    else
    {
        light[id.xy] = blur - decay * dt;
    }
}
